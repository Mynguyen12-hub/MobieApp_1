package com.example.nguyenthimynguyen;

import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.text.TextUtils;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.android.material.bottomnavigation.BottomNavigationView;

import java.util.ArrayList;
import java.util.List;

public class HomeActivity extends AppCompatActivity {

    EditText edtSearch;
    ImageView btnSearch, btnCart;
    RecyclerView rvNewProducts, rvFeaturedProducts, rvCategory;
    ProductAdapter featuredAdapter, newAdapter;
    CategoryAdapter categoryAdapter;
    List<Product> allProducts;
    TextView tvAddress, tvCartCount;
    BottomNavigationView bottomNavigation;
    String selectedCategory = "";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_home);

        // Kh·ªüi t·∫°o gi·ªè h√†ng v√† s·∫£n ph·∫©m
        CartManager.init(this);
        ProductRepository.initProducts();
        allProducts = ProductRepository.getAllProducts();

        // √Ånh x·∫° view
        edtSearch = findViewById(R.id.edtSearch);
        btnSearch = findViewById(R.id.btnSearch);
        btnCart = findViewById(R.id.btnCart);
        tvCartCount = findViewById(R.id.tvCartCount);
        rvFeaturedProducts = findViewById(R.id.rvFeaturedProducts);
        rvNewProducts = findViewById(R.id.rvNewProduct);
        rvCategory = findViewById(R.id.rvCategory);
        tvAddress = findViewById(R.id.tvAddress);
        bottomNavigation = findViewById(R.id.bottomNavigation);

        // C·∫≠p nh·∫≠t gi·ªè h√†ng ban ƒë·∫ßu
        CartUtils.updateCartCount(tvCartCount);

        // X·ª≠ l√Ω click gi·ªè h√†ng
        btnCart.setOnClickListener(v -> startActivity(new Intent(this, CartActivity.class)));

        // L·∫•y t√™n ng∆∞·ªùi d√πng
        SharedPreferences prefs = getSharedPreferences("user_data", MODE_PRIVATE);
        String username = prefs.getString("username", "admin");
        tvAddress.setText("üë§ Ng∆∞·ªùi d√πng: " + username);

        // X·ª≠ l√Ω bottom navigation
        bottomNavigation.setOnItemSelectedListener(item -> {
            int id = item.getItemId();
            if (id == R.id.nav_home) {
                return true;
            } else if (id == R.id.nav_products) {
                startActivity(new Intent(this, ProductListActivity.class));
                return true;
            } else if (id == R.id.nav_chat) {
                startActivity(new Intent(this, ChatActivity.class));
                return true;
            } else if (id == R.id.nav_admin) {
                startActivity(new Intent(this, UserActivity.class));
                return true;
            }
            return false; // ‚úÖ B·∫Øt bu·ªôc c√≥ d√≤ng n√†y n·∫øu kh√¥ng s·∫Ω l·ªói bi√™n d·ªãch
        });

        // C·∫≠p nh·∫≠t padding cho h·ªá th·ªëng
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {
            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);
            return insets;
        });

        // Danh m·ª•c
        rvCategory.setLayoutManager(new GridLayoutManager(this, 4));
        List<Category> categoryList = new ArrayList<>();
        categoryList.add(new Category("M·∫∑t tr·ªùi"));
        categoryList.add(new Category("√Ånh trƒÉng"));
        categoryList.add(new Category("Ng√¥i sao"));
        categoryList.add(new Category("Xem th√™m"));

        categoryAdapter = new CategoryAdapter(categoryList, position -> {
            String name = categoryList.get(position).getName();
            if (name.equals("Xem th√™m")) {
                categoryList.remove(position);
                categoryList.add(new Category("M·∫∑t tr·∫Øng"));
                categoryList.add(new Category("ƒê√°m m√¢y"));
                categoryList.add(new Category("Tinh t√∫"));
                categoryAdapter.notifyDataSetChanged();
            } else {
                selectedCategory = name.equals("T·∫•t c·∫£") ? "" : name;
                filterAndUpdate();
            }
        });
        rvCategory.setAdapter(categoryAdapter);

        // RecyclerView s·∫£n ph·∫©m
        rvFeaturedProducts.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false));
        rvNewProducts.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false));

        // Adapter r·ªóng ban ƒë·∫ßu
        featuredAdapter = new ProductAdapter(new ArrayList<>());
        newAdapter = new ProductAdapter(new ArrayList<>());
        rvFeaturedProducts.setAdapter(featuredAdapter);
        rvNewProducts.setAdapter(newAdapter);

        // Hi·ªÉn th·ªã s·∫£n ph·∫©m ban ƒë·∫ßu
        filterAndUpdate();

        // T√¨m ki·∫øm
        btnSearch.setOnClickListener(v -> filterAndUpdate());
    }

    @Override
    protected void onResume() {
        super.onResume();
        CartUtils.updateCartCount(tvCartCount);
    }

    private void filterAndUpdate() {
        String keyword = edtSearch.getText().toString().trim().toLowerCase();
        List<Product> filtered = new ArrayList<>();
        for (Product p : allProducts) {
            boolean matchName = TextUtils.isEmpty(keyword) || p.getName().toLowerCase().contains(keyword);
            boolean matchCat = TextUtils.isEmpty(selectedCategory) || p.getCategory().equalsIgnoreCase(selectedCategory);
            if (matchName && matchCat) {
                filtered.add(p.clone()); // clone tr√°nh thay ƒë·ªïi tr·ª±c ti·∫øp
            }
        }

        // T√°ch l√†m 2 danh s√°ch (6 ƒë·∫ßu ti√™n l√† n·ªïi b·∫≠t)
        List<Product> featuredList = new ArrayList<>();
        List<Product> newList = new ArrayList<>();
        for (int i = 0; i < filtered.size(); i++) {
            if (i < 6) featuredList.add(filtered.get(i));
            else newList.add(filtered.get(i));
        }

        featuredAdapter.updateList(featuredList);
        newAdapter.updateList(newList);
    }
}
